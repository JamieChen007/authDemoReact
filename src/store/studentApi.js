import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/dist/query/react";

// create API object
// creatApi() need a obj as argument
const studentApi = createApi({
  reducerPath: "studentApi", // Api identify, must not duplicate with other API and reducer
  baseQuery: fetchBaseQuery({
    baseUrl: "http://localhost:1337/api/",
    prepareHeaders: (headers, { getState }) => {
      //get token by getState()
      const token = getState().auth.token;

      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }

      return headers;
    },
  }),

  //set API tag type
  tagTypes: ["student", "teacher"],

  // set all function in endpoints, endpoints is a function, object as return
  endpoints(build) {
    return {
      getStudents: build.query({
        query() {
          return {
            url: "students",
          };
        },
        transformResponse: (response) => response.data,

        providesTags: [{ type: "student", id: "LIST" }],
      }),
      getStudentById: build.query({
        query(id) {
          return `students/${id}`;
        },
        transformResponse(baseQueryReturnValue) {
          return baseQueryReturnValue.data;
        },
        //set data cache time(second),default is 60s
        keepUnusedDataFor: 60,
        providesTags: (result, error, id) => [{ type: "student", id }],
      }),

      delStudent: build.mutation({
        query(id) {
          return {
            //if not "GET" request, need a object to set method as "POST" or "DELETE" or "PUT"
            url: `students/${id}`,
            method: "delete",
          };
        },
        invalidatesTags: [{ type: "student", id: "LIST" }],
      }),

      addStudent: build.mutation({
        query(stu) {
          return {
            url: "students",
            method: "post",
            body: { data: stu },
          };
        },
        invalidatesTags: [{ type: "student", id: "LIST" }],
      }),

      updateStudent: build.mutation({
        query(stu) {
          return {
            url: `students/${stu.id}`,
            method: "put",
            body: { data: stu.attributes },
          };
        },
        invalidatesTags: (result, error, stu) => [
          { type: "student", id: stu.id },
          { type: "student", id: "LIST" },
        ],
      }),
    };
  },
});

// after API created, hook will auto generated by endpoint's return object
// send request to server by using this hook function
// hook function name rule: getStudents -> useGetStudentsQuery
export const {
  useGetStudentsQuery,
  useGetStudentByIdQuery,
  useDelStudentMutation,
  useAddStudentMutation,
  useUpdateStudentMutation,
} = studentApi;

export default studentApi;
